Laporan Komprehensif: Membangun Aplikasi Klasifikasi Aksara Jawa yang Ringan dengan Python dan TensorFlow Lite


Laporan ini menyajikan panduan teknis dan strategis yang mendalam untuk mengembangkan aplikasi klasifikasi gambar Aksara Jawa yang efisien dan ringan. Ditujukan bagi pengembang Python, laporan ini mencakup seluruh siklus pengembangan, mulai dari pemilihan kerangka kerja (framework) yang tepat, analisis dataset, pelatihan model menggunakan teknik canggih, hingga implementasi dan penyusunan dokumen persyaratan produk (PRD) untuk aplikasi hipotetis bernama "Aksara Vision".


Bagian 1: Pemilihan Kerangka Kerja Strategis untuk Klasifikasi Aksara Jawa pada Perangkat


Pemilihan fondasi teknologi yang tepat adalah langkah paling krusial dalam menentukan keberhasilan sebuah proyek, terutama untuk aplikasi yang menargetkan perangkat dengan sumber daya terbatas (on-device). Keputusan ini akan memengaruhi performa, ukuran aplikasi, dan kemudahan pengembangan. Analisis berikut akan membedah opsi-opsi utama dan memberikan rekomendasi yang didasarkan pada kebutuhan spesifik proyek klasifikasi Aksara Jawa yang ringan.


1.1. Lanskap Machine Learning On-Device: Analisis Komparatif


Tiga kerangka kerja utama mendominasi lanskap inferensi machine learning pada perangkat: TensorFlow Lite, PyTorch Mobile, dan ONNX Runtime. Pilihan di antara ketiganya bukanlah tentang mana yang "terbaik" secara universal, melainkan mana yang paling sesuai dengan tujuan dan batasan proyek.1
* TensorFlow Lite (TFLite): Dikembangkan oleh Google, TFLite adalah yang terdepan untuk penerapan di lingkungan produksi, khususnya pada platform Android.2 Keunggulan utamanya terletak pada ekosistem yang matang, performa yang sangat teroptimisasi, dan dukungan akselerasi perangkat keras (GPU, NPU/DSP) yang luas melalui delegasi seperti NNAPI.3 TFLite secara konsisten menghasilkan ukuran biner yang lebih kecil, penggunaan memori yang lebih rendah, dan waktu inferensi yang lebih cepat dibandingkan kompetitornya, menjadikannya kandidat utama untuk memenuhi syarat "ringan".1 Meskipun demikian, proses konversi model yang kompleks terkadang bisa menjadi tantangan, dan dukungannya untuk iOS secara historis terasa kurang dipoles dibandingkan dengan Android.1
* PyTorch Mobile: Dikembangkan oleh Meta (Facebook), PyTorch Mobile menawarkan jalur yang lebih mulus bagi para peneliti atau tim yang sudah mahir menggunakan PyTorch.1 Keunggulan utamanya adalah kemudahan transisi dari tahap riset ke prototipe. Namun, untuk tujuan penerapan yang murni ringan, PyTorch Mobile memiliki beberapa kelemahan. Ukuran biner aplikasinya cenderung lebih besar daripada TFLite, dan dukungan akselerasi perangkat kerasnya, terutama di Android, belum sematang TFLite.1
* ONNX Runtime: Diposisikan sebagai "pahlawan interoperabilitas," ONNX (Open Neural Network Exchange) Runtime memungkinkan model yang dilatih di satu kerangka kerja (misalnya, PyTorch) untuk dijalankan di lingkungan lain (misalnya, yang berbasis TensorFlow).1 Fleksibilitas ini sangat berharga bagi organisasi besar dengan tim yang beragam atau untuk proyek yang ingin "tahan banting" terhadap perubahan tren kerangka kerja di masa depan.1 Namun, fleksibilitas ini sering kali datang dengan kompromi pada performa, dengan waktu inferensi yang bisa lebih lambat dibandingkan TFLite, dan proses penyiapan awal yang lebih rumit.1
Untuk memberikan gambaran yang lebih jelas, tabel berikut merangkum perbandingan kualitatif dan kuantitatif dari ketiga kerangka kerja tersebut.
Tabel 1: Perbandingan Kerangka Kerja Inferensi On-Device


Kriteria
	TensorFlow Lite
	PyTorch Mobile
	ONNX Runtime
	Waktu Inferensi
	Sangat Cepat (mis., 23 ms) 1
	Sedang (mis., 38 ms) 1
	Cepat (mis., 31 ms) 1
	Penggunaan Memori
	Rendah (mis., 89 MB) 1
	Tinggi (mis., 126 MB) 1
	Sedang (mis., 112 MB) 1
	Ukuran Biner
	Sangat Kecil (mis., 4 MB) 1
	Besar (mis., 12 MB) 1
	Bervariasi, cenderung sedang
	Kemudahan Penggunaan (Pengembang Aplikasi)
	Sangat Baik (terutama dengan Model Maker)
	Baik (jika sudah familiar dengan PyTorch)
	Sedang (membutuhkan lebih banyak konfigurasi)
	Dukungan Akselerasi HW (GPU/NPU)
	Luas dan Matang (terutama di Android) 3
	Terbatas, kurang matang 3
	Fleksibel (via execution providers) 1
	Kematangan Ekosistem
	Sangat Matang (didukung penuh oleh Google) 2
	Matang (populer di kalangan riset) 2
	Berkembang (fokus pada interoperabilitas) 5
	Platform Target Utama
	Android, Perangkat Tertanam (Mikrokontroler) 1
	iOS dan Android (dengan pengalaman bervariasi)
	Lintas Platform (Windows, Linux, Mobile) 1
	

1.2. Perangkat Pendukung Esensial: Pra-pemrosesan Gambar


Kerangka kerja inferensi tidak bekerja sendiri. Mereka membutuhkan library pendukung untuk menyiapkan data gambar sebelum dapat diproses. Untuk proyek ini, beberapa library Python menjadi sangat esensial:
* OpenCV (cv2): Ini adalah standar industri untuk tugas-tugas visi komputer. Kemampuannya sangat luas, mulai dari operasi dasar seperti membaca, mengubah ukuran, dan memutar gambar, hingga transformasi yang lebih kompleks yang diperlukan untuk augmentasi data.7 OpenCV akan menjadi alat utama untuk memanipulasi gambar Aksara Jawa.
* Pillow (PIL): Merupakan alternatif yang lebih sederhana dari OpenCV untuk tugas-tugas manipulasi gambar dasar. Jika kebutuhan pra-pemrosesan hanya sebatas membuka, menyimpan, dan memfilter gambar, Pillow bisa menjadi pilihan yang lebih ringan dan mudah digunakan.7
* NumPy: Ini adalah fondasi dari komputasi ilmiah di Python. Konsep fundamental yang perlu dipahami adalah bahwa gambar, bagi komputer, hanyalah sebuah array multi-dimensi. NumPy menyediakan struktur data dan fungsi untuk melakukan operasi pada array ini secara efisien, menjadikannya mutlak diperlukan untuk manipulasi piksel apa pun.8


1.3. Rekomendasi Ahli: Ekosistem TensorFlow Lite


Berdasarkan analisis komprehensif di atas, ekosistem TensorFlow Lite secara tegas direkomendasikan untuk proyek pengembangan aplikasi klasifikasi Aksara Jawa yang ringan.
Rekomendasi ini didasarkan pada rantai penalaran yang kuat. Kebutuhan utama pengguna adalah "ringan," yang secara langsung dipenuhi oleh keunggulan TFLite dalam hal ukuran model, penggunaan memori, dan kecepatan inferensi.1 Lebih penting lagi, Google telah mengembangkan
TensorFlow Lite Model Maker, sebuah library tingkat tinggi yang secara dramatis menyederhanakan proses transfer learning.9
Library ini menciptakan jembatan yang mulus antara dataset kustom (seperti Aksara Jawa) dan model .tflite yang sangat teroptimisasi dan siap pakai. Alur kerja terintegrasi dari pelatihan hingga penerapan ini tidak tertandingi dalam hal kemudahan dan efektivitas bagi pengembang yang berorientasi pada aplikasi. Kombinasi antara performa penerapan TFLite dan kemudahan penggunaan Model Maker menjadikannya pilihan yang secara objektif superior untuk proyek ini. Sisa dari laporan ini akan melanjutkan pengembangan dengan menggunakan tumpukan teknologi yang direkomendasikan ini.


Bagian 2: Pengembangan Model End-to-End: Dari Dataset hingga Model Siap Pakai


Bagian ini adalah panduan praktis yang akan memandu pengembang melalui setiap langkah teknis, lengkap dengan kode Python beranotasi. Tujuannya adalah untuk mengubah data mentah Aksara Jawa menjadi sebuah model klasifikasi yang fungsional dan ringan.


2.1. Akuisisi dan Analisis Dataset Aksara Jawa


Langkah pertama adalah mendapatkan data. Dataset utama yang paling sesuai untuk tugas ini adalah dataset "Aksara Jawa" yang tersedia di Kaggle, dibuat oleh pengguna 'phiard'.10
* Analisis Konten: Dataset ini berisi gambar-gambar tulisan tangan dari 20 karakter dasar Aksara Jawa, yang juga dikenal sebagai aksara nglegena (contohnya: ha, na, ca, ra, ka).11 Fakta bahwa data ini adalah tulisan tangan merupakan detail kritis yang memiliki implikasi signifikan.
* Implikasi dari Data "Tulisan Tangan": Penggunaan data tulisan tangan secara inheren memperkenalkan variabilitas yang sangat besar. Setiap individu memiliki gaya tulisan, ketebalan goresan, kemiringan, dan posisi karakter yang unik.13 Variasi ini berarti model yang dilatih pada data ini harus mampu melakukan generalisasi terhadap berbagai gaya tulisan yang belum pernah dilihatnya. Hal ini secara langsung mengarah pada kesimpulan bahwa
augmentasi data bukan lagi pilihan, melainkan sebuah keharusan untuk membangun model yang tangguh (robust).
* Struktur Data: Dataset ini memiliki struktur direktori yang sangat baik. Gambar-gambar untuk setiap karakter ditempatkan dalam subdirektori yang dinamai sesuai dengan kelasnya (misalnya, direktori /ha/ berisi gambar-gambar karakter 'ha', direktori /na/ untuk 'na', dan seterusnya).14 Struktur ini ideal dan kompatibel secara langsung dengan utilitas pemuatan data seperti
tf.keras.utils.image_dataset_from_directory dan, yang lebih penting untuk alur kerja kita, tflite_model_maker.image_classifier.DataLoader.from_folder.15


2.2. Pra-pemrosesan dan Augmentasi Data: Kunci Robustness


Seperti yang telah diidentifikasi, augmentasi data adalah teknik untuk memperbanyak dataset pelatihan secara artifisial dengan membuat variasi baru dari data yang ada. Tujuannya adalah untuk "mengajari" model agar tidak terlalu sensitif terhadap variasi tulisan tangan yang umum, sehingga meningkatkan kemampuannya untuk mengenali karakter dari berbagai sumber.17
Tabel berikut menyajikan teknik augmentasi yang paling relevan untuk dataset tulisan tangan Aksara Jawa.
Tabel 2: Teknik Augmentasi Data Kunci untuk Aksara Jawa


Teknik
	Deskripsi
	Manfaat Spesifik untuk Tulisan Tangan
	Parameter Rekomendasi (Keras)
	Peringatan/Catatan
	Rotasi
	Memutar gambar secara acak dalam rentang sudut tertentu.
	Mensimulasikan kemiringan alami dalam tulisan tangan atau saat mengambil foto.
	RandomRotation(factor=0.1) (rotasi ±36°)
	Hindari rotasi ekstrem yang dapat mengubah karakter menjadi tidak dapat dikenali (misalnya, membalik 'na' menjadi 'ga').
	Pergeseran (Shift/Translation)
	Menggeser gambar secara horizontal atau vertikal.
	Mensimulasikan karakter yang tidak ditulis tepat di tengah.
	RandomTranslation(height_factor=0.1, width_factor=0.1)
	Sangat berguna karena posisi karakter dalam gambar bisa sangat bervariasi.
	Zoom/Skala
	Memperbesar atau memperkecil gambar secara acak.
	Mensimulasikan ukuran tulisan yang berbeda-beda antar individu.
	RandomZoom(height_factor=0.2)
	Membantu model menjadi invarian terhadap skala.
	Geser (Shear)
	Memiringkan gambar sepanjang salah satu sumbu.
	Mensimulasikan tulisan tangan yang miring (condong ke kiri atau kanan).
	tf.keras.preprocessing.image.ImageDataGenerator(shear_range=0.2)
	Efektif untuk menangkap variasi gaya tulisan miring.
	Distorsi Elastis
	Melengkungkan gambar secara lokal dengan menggeser piksel.
	Teknik canggih yang sangat efektif untuk meniru goresan tangan manusia yang tidak sempurna dan non-linear.17
	Membutuhkan implementasi kustom atau library seperti albumentations.
	Memberikan hasil yang sangat realistis tetapi secara komputasi lebih mahal.
	Implementasi dengan Keras:
Sebuah pipeline augmentasi dapat dibangun dengan mudah menggunakan tf.keras.Sequential. Kode berikut menunjukkan cara membuat pipeline sederhana yang dapat diterapkan pada tf.data.Dataset.


Python




import tensorflow as tf

data_augmentation_pipeline = tf.keras.Sequential()

Meskipun TFLite Model Maker memiliki augmentasi bawaan, untuk kontrol yang lebih besar dan hasil yang berpotensi lebih baik, pengembang dapat membuat tf.data.Dataset secara manual, menerapkan pipeline augmentasi kustom ini menggunakan metode .map(), dan kemudian memasukkan dataset yang sudah diaugmentasi ini ke dalam Model Maker. Ini menunjukkan pendekatan yang lebih canggih dan mendalam.19


2.3. Pelatihan Model dengan TensorFlow Lite Model Maker


Berikut adalah panduan langkah demi langkah lengkap dengan skrip Python untuk melatih model klasifikasi Aksara Jawa.
Langkah 1: Instalasi
Pastikan library yang diperlukan sudah terpasang.


Bash




pip install tflite-model-maker
pip install tensorflow
pip install matplotlib

Langkah 2: Pemuatan dan Persiapan Data
Skrip ini mengasumsikan Anda telah mengunduh dan mengekstrak dataset Kaggle "Aksara Jawa" ke dalam sebuah direktori.


Python




import tensorflow as tf
import matplotlib.pyplot as plt
import os

from tflite_model_maker import image_classifier
from tflite_model_maker.image_classifier import DataLoader

# Tentukan path ke direktori dataset Anda
dataset_path = 'path/to/your/aksara-jawa-dataset'

# Muat data menggunakan DataLoader dari Model Maker
# Library ini secara otomatis akan menggunakan nama subdirektori sebagai label
data = DataLoader.from_folder(dataset_path)

# Bagi data menjadi set pelatihan (80%) dan set pengujian (20%)
train_data, test_data = data.split(0.8)

print(f"Jumlah data latih: {len(train_data)}")
print(f"Jumlah data uji: {len(test_data)}")

9
Langkah 3: Pembuatan Model Menggunakan Transfer Learning
Ini adalah inti dari proses. Kita akan menggunakan model yang sudah dilatih sebelumnya (pra-terlatih) pada dataset gambar raksasa (ImageNet) dan mengadaptasinya untuk tugas kita. Teknik ini, yang disebut transfer learning, secara drastis mengurangi waktu pelatihan dan jumlah data yang dibutuhkan.21 Kita akan memilih
MobileNetV2, sebuah model yang dirancang khusus agar ringan dan efisien.23


Python




# Buat model klasifikasi gambar.
# Kita tentukan 'mobilenet_v2_spec' untuk menggunakan arsitektur MobileNetV2 yang ringan.
# 'epochs=15' berarti kita akan melatih model pada seluruh data latih sebanyak 15 kali.
# Model Maker secara otomatis menerapkan augmentasi data dasar secara default.
model = image_classifier.create(
   train_data,
   model_spec=image_classifier.ModelSpec(uri='https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'),
   epochs=15,
   validation_data=test_data # Gunakan test_data sebagai validasi selama pelatihan
)

# Tampilkan ringkasan arsitektur model
model.summary()

9
Langkah 4: Evaluasi Model
Setelah pelatihan selesai, kita perlu mengukur seberapa baik performa model pada data yang belum pernah dilihatnya (set pengujian).


Python




# Evaluasi model pada data uji untuk mendapatkan metrik loss dan akurasi
loss, accuracy = model.evaluate(test_data)

print(f"Loss pada data uji: {loss:.4f}")
print(f"Akurasi pada data uji: {accuracy:.4f}")

9


2.4. Ekspor dan Kuantisasi Model: Langkah Kritis untuk "Ringan"


Model yang telah dilatih masih dalam format Keras. Untuk dapat digunakan pada perangkat seluler, model ini harus dikonversi ke format .tflite. Selama proses ini, kita akan melakukan kuantisasi, sebuah langkah optimisasi krusial.
Kuantisasi adalah proses mengurangi presisi bobot model, biasanya dari angka floating-point 32-bit menjadi integer 8-bit. Langkah ini secara signifikan mengurangi ukuran file model (seringkali hingga 4x lebih kecil) dan mempercepat waktu inferensi, terutama pada perangkat keras yang mendukungnya, dengan sedikit atau tanpa penurunan akurasi.24 Bagi aplikasi
on-device, kuantisasi bukanlah pilihan, melainkan sebuah keharusan untuk mencapai performa optimal. Untungnya, TFLite Model Maker melakukan kuantisasi integer penuh (full integer quantization) secara default untuk tugas klasifikasi gambar.15


Python




# Ekspor model ke format.tflite.
# Secara default, Model Maker akan menerapkan kuantisasi.
# File model.tflite dan labels.txt akan dibuat di direktori 'exported_model'.
export_dir = 'exported_model'
model.export(export_dir=export_dir)

print(f"Model berhasil diekspor ke direktori: {export_dir}")

9


2.5. Uji Coba Inferensi Lokal dengan Model .tflite


Langkah terakhir adalah memverifikasi bahwa file .tflite yang kita hasilkan berfungsi dengan benar. Untuk ini, kita akan menggunakan library tflite-runtime, yang merupakan versi ringan dari TensorFlow yang hanya berisi interpreter yang diperlukan untuk inferensi, bukan seluruh framework pelatihan.26


Python




import numpy as np
from PIL import Image
import tflite_runtime.interpreter as tflite

# Path ke model dan label yang diekspor
model_path = "exported_model/model.tflite"
labels_path = "exported_model/labels.txt"

# Path ke gambar sampel untuk diuji (ganti dengan path gambar Anda)
sample_image_path = "path/to/your/sample_aksara_image.png"

# Muat label
with open(labels_path, 'r') as f:
   labels = f.read().splitlines()

# Muat model TFLite dan alokasikan tensor
interpreter = tflite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Dapatkan detail input dan output
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# Dapatkan tinggi dan lebar input yang diharapkan oleh model
_, height, width, _ = input_details['shape']

# Muat dan pra-proses gambar sampel
image = Image.open(sample_image_path).convert('RGB').resize((width, height))
input_data = np.expand_dims(image, axis=0)

# Jika model dikuantisasi (input int8), lakukan normalisasi yang sesuai
if input_details['dtype'] == np.uint8:
   input_scale, input_zero_point = input_details['quantization']
   input_data = (input_data / input_scale) + input_zero_point
   input_data = input_data.astype(np.uint8)

# Atur tensor input
interpreter.set_tensor(input_details['index'], input_data)

# Jalankan inferensi
interpreter.invoke()

# Dapatkan hasil output
output_data = interpreter.get_tensor(output_details['index'])
scores = np.squeeze(output_data)

# Dapatkan prediksi teratas
top_prediction_index = np.argmax(scores)
predicted_label = labels[top_prediction_index]
confidence = scores[top_prediction_index]

# Jika model dikuantisasi (output int8), lakukan de-kuantisasi
if output_details['dtype'] == np.uint8:
   output_scale, output_zero_point = output_details['quantization']
   confidence = (float(confidence) - output_zero_point) * output_scale

print(f"Gambar diprediksi sebagai: {predicted_label}")
print(f"Dengan skor keyakinan: {confidence:.4f}")

25


Bagian 3: Pendekatan Alternatif: Modul DNN pada OpenCV


Meskipun alur kerja TensorFlow Lite direkomendasikan, penting untuk mengetahui alternatif yang ada. Modul Deep Neural Network (DNN) pada OpenCV menawarkan jalur yang berbeda untuk inferensi.


3.1. Tinjauan Umum Modul DNN OpenCV


Penting untuk dipahami bahwa modul dnn OpenCV adalah mesin inferensi, bukan library pelatihan.28 Ini berarti modul ini tidak dapat digunakan untuk melatih model dari awal. Sebaliknya, modul ini dirancang untuk memuat dan menjalankan model yang telah dilatih sebelumnya menggunakan kerangka kerja populer lainnya seperti TensorFlow, Caffe, PyTorch, atau ONNX.29


3.2. Alur Kerja Inferensi dengan OpenCV


Alur kerja untuk melakukan klasifikasi menggunakan modul DNN OpenCV relatif sederhana dan berpusat pada OpenCV.


Python




import cv2
import numpy as np

# Asumsikan Anda memiliki model TensorFlow yang sudah dilatih
# dalam format.pb dan.pbtxt
model_pb = "path/to/your/frozen_inference_graph.pb"
model_pbtxt = "path/to/your/graph.pbtxt"
labels_path = "path/to/your/labels.txt"
image_path = "path/to/your/sample_aksara_image.png"

# Muat model menggunakan OpenCV
net = cv2.dnn.readNet(model_pb, model_pbtxt)

# Muat gambar
image = cv2.imread(image_path)

# Buat 'blob' dari gambar. Fungsi ini menangani pengubahan ukuran dan normalisasi.
# Ukuran (224, 224) dan nilai mean (127.5) harus sesuai dengan yang digunakan saat pelatihan.
blob = cv2.dnn.blobFromImage(image, 1.0/127.5, (224, 224), (127.5, 127.5, 127.5), swapRB=True, crop=False)

# Atur blob sebagai input ke jaringan
net.setInput(blob)

# Lakukan forward pass untuk mendapatkan output
output = net.forward()

# Muat label
with open(labels_path, 'r') as f:
   labels = f.read().strip().split('\n')

# Dapatkan kelas dengan probabilitas tertinggi
predicted_class_id = np.argmax(output)
confidence = output[predicted_class_id]
predicted_label = labels[predicted_class_id]

print(f"Prediksi (OpenCV DNN): {predicted_label}")
print(f"Keyakinan: {confidence:.4f}")

28


3.3. Analisis Komparatif dan Kasus Penggunaan


Pendekatan menggunakan OpenCV DNN menawarkan keuntungan berupa decoupling dari ekosistem TensorFlow. Jika sebuah aplikasi sudah sangat bergantung pada OpenCV untuk pemrosesan gambar lainnya, mengintegrasikan inferensi langsung di dalamnya bisa menyederhanakan arsitektur perangkat lunak.
Namun, pendekatan ini memiliki kelemahan yang signifikan dalam konteks proyek ini. Pengembang kehilangan alur kerja yang sangat efisien dan terintegrasi yang ditawarkan oleh TFLite Model Maker. Selain itu, yang lebih penting, ada potensi kehilangan performa. TFLite Runtime dirancang untuk berintegrasi secara mendalam dengan akselerator perangkat keras on-device (seperti NNAPI di Android) melalui sistem delegasinya.3 Integrasi ini seringkali lebih teroptimisasi dibandingkan dengan backend inferensi generik yang mungkin digunakan oleh OpenCV.
Oleh karena itu, pendekatan OpenCV DNN paling cocok untuk skenario di mana model pra-terlatih sudah ada (dan mungkin bukan dalam format TensorFlow), dan kerangka kerja aplikasi utama sudah sangat berpusat pada OpenCV. Untuk membangun model baru yang ringan dari awal, jalur TensorFlow Lite tetap menjadi pilihan superior.


Bagian 4: Dokumen Persyaratan Produk (PRD) - "Aksara Vision"


Bagian ini menyajikan Dokumen Persyaratan Produk (PRD) untuk aplikasi seluler hipotetis, "Aksara Vision," yang dibangun berdasarkan teknologi yang telah dibahas. PRD ini berfungsi sebagai cetak biru untuk tim produk dan pengembangan.


4.1. Latar Belakang dan Visi Produk


   * Masalah: Penggunaan dan pemahaman Aksara Jawa mengalami penurunan di era digital. Alat bantu digital yang ada untuk mempelajari dan menggunakan aksara ini masih terbatas, menciptakan hambatan bagi pelajar baru dan mengurangi relevansinya dalam kehidupan sehari-hari.13
   * Visi: Melestarikan dan mempromosikan warisan budaya Jawa dengan menciptakan aplikasi seluler yang dapat diakses, intuitif, dan menarik. Aplikasi ini akan menggunakan kecerdasan buatan (AI) untuk menjembatani kesenjangan antara pengguna modern dan Aksara Jawa.


4.2. Persona Pengguna dan Skenario Penggunaan


   * Persona 1: Pelajar/Mahasiswa (Sari, 16 tahun)
   * Kebutuhan: Sari adalah seorang siswi SMA di Jawa Tengah yang diwajibkan mempelajari Aksara Jawa di sekolah. Dia sering merasa tidak yakin apakah tulisan tangannya sudah benar dan tidak memiliki cara cepat untuk memeriksanya.
   * Skenario: Setelah mengerjakan PR menulis Aksara Jawa, Sari membuka aplikasi "Aksara Vision", mengarahkan kamera ponselnya ke setiap karakter yang ia tulis, dan mendapatkan umpan balik instan tentang kebenarannya.
   * Persona 2: Pegiat Budaya/Peneliti (Bapak Budi, 45 tahun)
   * Kebutuhan: Bapak Budi bekerja di sebuah lembaga kebudayaan dan sering berurusan dengan naskah-naskah kuno. Dia membutuhkan alat bantu cepat untuk mengidentifikasi karakter-karakter dasar saat melakukan transkripsi awal.
   * Skenario: Saat meneliti sebuah manuskrip, Bapak Budi menemukan karakter yang kurang jelas. Dia mengambil foto halaman tersebut dengan ponselnya, mengimpornya ke "Aksara Vision", dan aplikasi membantunya mengidentifikasi karakter tersebut dengan tingkat keyakinan tertentu.


4.3. Fitur dan Fungsionalitas (Minimum Viable Product - MVP)


Lingkup MVP harus didefinisikan secara cermat untuk memastikan peluncuran yang layak dan berkualitas tinggi. Berdasarkan analisis dataset yang tersedia secara publik, model awal akan paling akurat jika dilatih pada 20 aksara nglegena dasar.11 Oleh karena itu, fungsionalitas MVP akan difokuskan secara eksklusif pada 20 karakter ini.
Tabel 3: Prioritas Fitur MVP "Aksara Vision"
Prioritas
	Fitur
	Deskripsi & User Story
	Must-Have
	Klasifikasi Karakter dari Kamera Real-time
	Pengguna dapat mengarahkan kamera ponsel mereka ke sebuah karakter Aksara Jawa dan mendapatkan hasil klasifikasi secara langsung di layar. User Story: "Sebagai Sari, saya ingin mengarahkan kamera ke tulisan saya agar bisa langsung tahu apakah benar atau salah."
	Must-Have
	Impor Gambar dari Galeri
	Pengguna dapat memilih gambar yang sudah ada dari galeri ponsel mereka untuk diklasifikasikan. User Story: "Sebagai Bapak Budi, saya ingin mengunggah foto naskah agar dapat mengidentifikasi karakter di dalamnya."
	Must-Have
	Tampilan Hasil yang Jelas
	Antarmuka menampilkan gambar karakter yang terdeteksi, nama Latinnya (mis., "Ha", "Na"), dan skor keyakinan (mis., 98%).
	Should-Have
	Halaman Riwayat Klasifikasi
	Aplikasi menyimpan beberapa hasil klasifikasi terakhir sehingga pengguna dapat meninjaunya kembali.
	Should-Have
	Halaman Informasi Sederhana
	Sebuah halaman statis yang menampilkan daftar 20 aksara nglegena beserta nama Latinnya sebagai referensi cepat bagi pengguna.
	Could-Have
	Mode Gelap (Dark Mode)
	Menyediakan tema antarmuka alternatif untuk kenyamanan visual.
	Won't-Have (for MVP)
	Klasifikasi Sandhangan dan Angka
	Pengenalan diakritik, vokal, dan angka Jawa tidak akan disertakan dalam MVP karena membutuhkan dataset dan model yang lebih kompleks.
	

4.4. Persyaratan Teknis dan Batasan


   * Tumpukan Teknologi: Python, TensorFlow Lite.
   * Model: Model .tflite yang telah dikuantisasi.
   * Platform Target: Android (fokus awal, karena dukungan TFLite yang lebih matang dan basis pengguna yang lebih besar di wilayah target).1
   * Indikator Kinerja Utama (KPIs):
   * Waktu inferensi on-device harus di bawah 50 ms pada perangkat kelas menengah.
   * Akurasi model harus melebihi 95% pada set data uji internal.
   * Ukuran file model .tflite harus di bawah 5 MB.


4.5. Metrik Keberhasilan


   * Akurasi Produk: Tingkat keberhasilan klasifikasi yang dilaporkan oleh pengguna (melalui mekanisme umpan balik opsional).
   * Keterlibatan Pengguna: Jumlah Pengguna Aktif Harian (DAU), rata-rata jumlah klasifikasi per sesi.
   * Retensi Pengguna: Persentase pengguna yang kembali menggunakan aplikasi setelah 1 minggu dan 1 bulan.


4.6. Peta Jalan Pengembangan (Pasca-MVP)


Peta jalan ini dirancang untuk secara sistematis mengatasi batasan-batasan dari MVP dan mengembangkan "Aksara Vision" menjadi alat yang lebih komprehensif.
   * Versi 1.1 (Kuartal Berikutnya): Dukungan Sandhangan
   * Tujuan: Menambahkan kemampuan untuk mengenali karakter dasar yang digabungkan dengan diakritik vokal (misalnya, wulu untuk 'i', suku untuk 'u').
   * Kebutuhan: Pengumpulan dan pelabelan dataset baru yang secara spesifik berisi kombinasi karakter dan sandhangan.
   * Versi 1.2 (2 Kuartal Berikutnya): Pengenalan Angka Jawa
   * Tujuan: Menambahkan kemampuan untuk mengenali 10 angka dasar Aksara Jawa (angka).
   * Kebutuhan: Memperluas dataset dengan gambar-gambar angka Jawa.
   * Versi 2.0 (Jangka Panjang): Pengenalan Kata Utuh
   * Tujuan: Beralih dari klasifikasi karakter tunggal ke pengenalan kata atau rangkaian karakter.
   * Kebutuhan: Perubahan arsitektur model dari CNN sederhana ke model sekuensial seperti CNN-RNN atau Transformer, serta dataset yang dilabeli di tingkat kata.
   * Versi 2.1 (Jangka Panjang): Modul Belajar Interaktif
   * Tujuan: Menambahkan fitur di mana pengguna dapat berlatih menulis aksara langsung di layar ponsel dan mendapatkan umpan balik goresan-demi-goresan.
   * Kebutuhan: Pengembangan antarmuka kanvas gambar dan model yang lebih canggih untuk analisis goresan.
Works cited
   1. Edge AI: TensorFlow Lite vs. ONNX Runtime vs. PyTorch Mobile, accessed on July 15, 2025, https://dzone.com/articles/edge-ai-tensorflow-lite-vs-onnx-runtime-vs-pytorch
   2. PyTorch vs. TensorFlow: A Comprehensive Comparison - Rafay Systems, accessed on July 15, 2025, https://rafay.co/ai-and-cloud-native-blog/pytorch-vs-tensorflow-a-comprehensive-comparison/
   3. TensorFlow Lite vs PyTorch Mobile for On-Device Machine Learning ..., accessed on July 15, 2025, https://proandroiddev.com/tensorflow-lite-vs-pytorch-mobile-for-on-device-machine-learning-1b214d13635f
   4. Performant on-device inferencing with ONNX Runtime - Open Source at Microsoft, accessed on July 15, 2025, https://opensource.microsoft.com/blog/2023/02/08/performant-on-device-inferencing-with-onnx-runtime/
   5. TensorFlow vs. PyTorch vs. JAX vs. ONNX: Which Framework Powers Your Machine Learning Journey? | by Thiksiga Ragulakaran | Medium, accessed on July 15, 2025, https://medium.com/@thiksigar/tensorflow-vs-pytorch-vs-jax-vs-onnx-which-framework-powers-your-machine-learning-journey-55e4a7c41ec9
   6. Good reasons to prefer tensorflow lite for mobile? : r/computervision - Reddit, accessed on July 15, 2025, https://www.reddit.com/r/computervision/comments/1l39yq9/good_reasons_to_prefer_tensorflow_lite_for_mobile/
   7. Top Python Libraries For Image Processing In 2021 - Analytics Vidhya, accessed on July 15, 2025, https://www.analyticsvidhya.com/blog/2021/04/top-python-libraries-for-image-processing-in-2021/
   8. Top 8 Image-Processing Python Libraries Used in Machine Learning - neptune.ai, accessed on July 15, 2025, https://neptune.ai/blog/image-processing-python-libraries-for-machine-learning
   9. TensorFlow Lite Model Maker | Google AI Edge - Gemini API, accessed on July 15, 2025, https://ai.google.dev/edge/litert/libraries/modify
   10. Aksara Jawa - Kaggle, accessed on July 15, 2025, https://www.kaggle.com/datasets/phiard/aksara-jawa
   11. IqbalLx/Hanacaraka-AI: Image classification for javanese script. This project is our final project for Google Bangkit Academy - GitHub, accessed on July 15, 2025, https://github.com/IqbalLx/Hanacaraka-AI
   12. JAVANESE CHARACTER RECOGNITION WITH REAL-TIME DETECTION USING CONVOLUTIONAL NEURAL NETWORK - Universitas Muhammadiyah Surakarta, accessed on July 15, 2025, https://eprints.ums.ac.id/107853/3/Naskah%20Publikasi.pdf
   13. Example of Dataset from Different Source. | Download Scientific Diagram - ResearchGate, accessed on July 15, 2025, https://www.researchgate.net/figure/Example-of-Dataset-from-Different-Source_tbl1_337424254
   14. ChatGPT_MyLearning on Dataset Aksara Jawa | PDF | Optical Character Recognition, accessed on July 15, 2025, https://www.scribd.com/document/809480881/ChatGPT-MyLearning-on-Dataset-Aksara-Jawa
   15. Image classification with TensorFlow Lite Model Maker | Google AI ..., accessed on July 15, 2025, https://ai.google.dev/edge/litert/libraries/modify/image_classification
   16. transfer_learning_tfhub/notebooks/model_maker_image_classification(flowers).ipynb at main - GitHub, accessed on July 15, 2025, https://github.com/gustheman/transfer_learning_tfhub/blob/main/notebooks/model_maker_image_classification(flowers).ipynb
   17. How is data augmentation applied to handwriting recognition? - Milvus, accessed on July 15, 2025, https://milvus.io/ai-quick-reference/how-is-data-augmentation-applied-to-handwriting-recognition
   18. Data Augmentation in Python: Everything You Need to Know, accessed on July 15, 2025, https://neptune.ai/blog/data-augmentation-in-python
   19. Data augmentation | TensorFlow Core, accessed on July 15, 2025, https://www.tensorflow.org/tutorials/images/data_augmentation
   20. How to augment data using tflite_model_maker? - Stack Overflow, accessed on July 15, 2025, https://stackoverflow.com/questions/74632135/how-to-augment-data-using-tflite-model-maker
   21. Transfer learning and fine-tuning | TensorFlow Core, accessed on July 15, 2025, https://www.tensorflow.org/tutorials/images/transfer_learning
   22. Transfer learning & fine-tuning | TensorFlow Core, accessed on July 15, 2025, https://www.tensorflow.org/guide/keras/transfer_learning
   23. Image_Classification_With_Tflite, accessed on July 15, 2025, https://www.kaggle.com/code/shubhamdivakar/image-classification-with-tflite-model-maker
   24. TensorFlow Lite Image Classification Models with Model Maker - Fritz ai, accessed on July 15, 2025, https://fritz.ai/tensorflow-lite-image-classification-models-with-model-maker/
   25. TensorFlow Lite (TFLite) Python Inference Example with Quantization - GitHub Gist, accessed on July 15, 2025, https://gist.github.com/ShawnHymel/f7b5014d6b725cb584a1604743e4e878
   26. tflite-runtime example - GitHub Gist, accessed on July 15, 2025, https://gist.github.com/ShawnHymel/a0dcef36e6724bdc3781b09555a51c67
   27. Running TensorFlow Lite Image Classification Models in Python | by ..., accessed on July 15, 2025, https://heartbeat.comet.ml/running-tensorflow-lite-image-classification-models-in-python-92ef44b4cd47
   28. [Deep Learning] Using OpenCV as deep learning inference engine ..., accessed on July 15, 2025, https://shrishailsgajbhar.github.io/post/Deep-Learning-Image-Classification-Opencv-DNN
   29. Feature extraction and image classification using OpenCV - Domino Data Lab, accessed on July 15, 2025, https://domino.ai/blog/feature-extraction-and-image-classification-using-deep-neural-networks
   30. Deep Neural Networks (dnn module) - OpenCV Documentation, accessed on July 15, 2025, https://docs.opencv.org/4.x/d2/d58/tutorial_table_of_content_dnn.html
   31. Introduction to OpenCV DNN Module - Kaggle, accessed on July 15, 2025, https://www.kaggle.com/code/ahedjneed/introduction-to-opencv-dnn-module
   32. Aksara Jawa /Javanese Script - images - Kaggle, accessed on July 15, 2025, https://www.kaggle.com/code/mpwolke/aksara-jawa-javanese-script-images